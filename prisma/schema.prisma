generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Giveaway {
  id           String   @id
  host_id      String   @map("hostId")
  guild_id     String   @map("serverId")
  guild        Guild    @relation(fields: [guild_id], references: [id])
  end_date     DateTime @map("expires_at") @db.Timestamptz(6)
  locale       String
  participants String[]
}

model Poll {
  id         String   @id
  guild_id   String   @map("serverId")
  channel_id String?
  message_id String?
  creator_id String   @map("creatorId")
  title      String?
  choices    Json[]
  end_date   DateTime @map("expires_at") @db.Timestamptz(6)
  locale     String
  guild      Guild    @relation(fields: [guild_id], references: [id])
}

model Reminder {
  id          String         @id
  user_id     String         @map("userId")
  user        User           @relation(fields: [user_id], references: [id])
  end_date    DateTime       @map("expires_at") @db.Timestamptz(6)
  locale      String
  destination String
  subject     String
  details     String?
  type        ReminderTypes?
}

model Guild {
  id                       String            @id
  join_channel_id          String?           @map("join_channel")
  join_message             Json?
  leave_channel_id         String?           @map("leave_channel")
  leave_message            Json?
  notifications_channel_id String?           @map("modlogs_channel")
  reports_channel_id       String?           @map("reports_channel")
  accent_color             Int?
  auto_theming_enabled     Boolean?          @default(true) @map("auto_theme")
  icon                     String?
  economy                  Economy?
  modules                  serverModules?
  giveaways                Giveaway[]
  polls                    Poll[]
  flags                    Int?              @default(0)
  // achievements             Achievement[]
  // permissions  ServerPermissions[]
  members                  GuildMember[]
  moderation_history       ModerationEntry[]

  @@map("servers")
}

// model ServerPermissions {
//   serverId            String   @id @map("server_id")
//   server              servers  @relation(fields: [serverId], references: [id])
//   moderatorRoles      String[] @map("mod_roles")
//   pollsAllowed        Json[]   @map("polls_allowlist")
//   pollsDisallowed     Json[]   @map("polls_blocklist")
//   giveawaysAllowed    Json[]   @map("gways_allowlist")
//   giveawaysDisallowed Json[]   @map("gways_blocklist")
// }

model serverModules {
  id                       String  @id
  economy                  Boolean @default(false)
  join_message             Boolean @default(false)
  leave_message            Boolean @default(false)
  moderation_notifications Boolean @default(false) @map("modlogs")
  moderation_reports       Boolean @default(false) @map("modreports")
  guild                    Guild   @relation(fields: [id], references: [id])
}

model moderationStrikes {
  id           String                @id @default(uuid()) @db.Uuid
  moderator_id String
  guild_id     String                @map("server_id")
  target_id    String
  reason       String?
  created_at   DateTime              @db.Timestamptz(6)
  end_date     DateTime?             @map("expires_at") @db.Timestamptz(6)
  type         ModerationStrikeTypes
  details      String?
}

model ModerationEntry {
  id        String    @id
  user_id   String
  guild_id  String
  target_id String
  reason    String?
  end_date  DateTime? @db.Timestamptz(6)
  type      Int
  details   String?
  options   Json?
  guild     Guild     @relation(fields: [guild_id], references: [id])
}

model User {
  id            String        @id
  accent_color  Int?
  crbt_badges   String[]
  telemetry     Boolean       @default(true)
  silent_joins  Boolean       @default(false)
  silent_leaves Boolean       @default(false)
  reminders     Reminder[]
  memberData    GuildMember[]
}

model GuildMember {
  id           String    @id
  user_id      String
  user         User      @relation(references: [id], fields: [user_id])
  guild_id     String
  guild        Guild     @relation(references: [id], fields: [guild_id])
  // achievements MemberAchievement[]
  last_work    DateTime? @db.Timestamptz(6)
  last_daily   DateTime? @db.Timestamptz(6)
  work_exp     Int       @default(0) @db.Integer
  money        Int       @default(0) @db.Integer
  active_items Item[]    @relation("active_items")
  items        Item[]    @relation("items")
  daily_streak Int
}

// model MemberAchievement {
//   achievement_id String       @id
//   achievement    Achievement  @relation(fields: [achievement_id], references: [achievement_id])
//   member_id      String       @unique
//   member         GuildMember? @relation(fields: [member_id], references: [id])
//   progression    Json[]
//   achieved_at    DateTime?    @db.Timestamptz(6)
// }

// model Achievement {
//   achievement_id String              @id
//   guild_id       String
//   guild          Guild?              @relation(fields: [guild_id], references: [id])
//   name           String
//   description    String?
//   requirements   Json[]
//   total_steps    Int
//   members        MemberAchievement[]
// }

model Economy {
  id                          String     @id
  currency_name_singular      String?
  currency_name_plural        String?
  currency_symbol             String?
  transaction_logs_channel_id String?
  guild                       Guild?     @relation(fields: [id], references: [id])
  work_cooldown               Int?
  work_strings                String[]
  work_reward                 String?
  daily_reward                String?
  weekly_rewards              String[]
  items                       Item[]
  categories                  Category[]
}

model Item {
  id              String        @id
  guild_id        String
  name            String
  emoji           String
  description     String?
  price           Int
  category_id     String
  category        Category      @relation(fields: [category_id], references: [id])
  type            Int
  stock           Int?
  // for items limited in time
  available_until DateTime?     @db.Timestamptz(6)
  // the value an item can hold (role ID, Multiplier, etc)
  value           String?
  // who's currently using the item
  activeMembers   GuildMember[] @relation("active_items")
  // who has the item
  owners          GuildMember[] @relation("items")
  // which economy does the item belong to
  economy         Economy       @relation(fields: [guild_id], references: [id])
}

model Category {
  id       String  @id
  guild_id String
  items    Item[]
  label    String
  emoji    String
  economy  Economy @relation(fields: [guild_id], references: [id])
}

model Token {
  token String     @id
  data  Json       @db.Json
  type  TokenTypes
}

enum ModerationStrikeTypes {
  BAN
  TEMPBAN
  CLEAR
  KICK
  TIMEOUT
  WARN
  REPORT
}

enum TokenTypes {
  API
}

enum ReminderTypes {
  // basic user-set reminder (e.g. /reminder new)
  NORMAL
  // found on commands with a cooldown (e.g. economy commands)
  COMMAND
  // reminder with an attached message
  MESSAGE
  // reminder set for someone's birthday (deprecated feature)
  BIRTHDAY
}
