generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Giveaway {
  id           String   @id
  hostId       String
  serverId     String
  server       servers  @relation(fields: [serverId], references: [id])
  expiresAt    DateTime @map("expires_at") @db.Timestamptz(6)
  locale       String
  participants String[]
}

model Poll {
  id        String   @id
  creatorId String
  choices   Json[]
  expiresAt DateTime @map("expires_at") @db.Timestamptz(6)
  locale    String
  serverId  String
  server    servers  @relation(fields: [serverId], references: [id])
}

model Reminder {
  id          String         @id
  userId      String
  user        User           @relation(fields: [userId], references: [id])
  expiresAt   DateTime       @map("expires_at") @db.Timestamptz(6)
  locale      String
  destination String
  subject     String
  details     String?
  type        ReminderTypes?
}

model servers {
  id                String         @id
  joinChannel       String?        @map("join_channel")
  joinMessage       Json?          @map("join_message")
  leaveChannel      String?        @map("leave_channel")
  leaveMessage      Json?          @map("leave_message")
  modLogsChannel    String?        @map("modlogs_channel")
  modReportsChannel String?        @map("reports_channel")
  accentColor       Int?           @map("accent_color")
  automaticTheming  Boolean?       @default(true) @map("auto_theme")
  iconHash          String?        @map("icon")
  economy           Economy?
  modules           serverModules?
  giveaways         Giveaway[]
  polls             Poll[]
  flags             Int?           @default(0)
  achievements      Achievement[]
  // permissions  ServerPermissions[]
  members           ServerMember[]
}

// model ServerPermissions {
//   serverId            String   @id @map("server_id")
//   server              servers  @relation(fields: [serverId], references: [id])
//   moderatorRoles      String[] @map("mod_roles")
//   pollsAllowed        Json[]   @map("polls_allowlist")
//   pollsDisallowed     Json[]   @map("polls_blocklist")
//   giveawaysAllowed    Json[]   @map("gways_allowlist")
//   giveawaysDisallowed Json[]   @map("gways_blocklist")
// }

model serverModules {
  id                String  @id
  economy           Boolean @default(false)
  joinMessage       Boolean @default(false) @map("join_message")
  leaveMessage      Boolean @default(false) @map("leave_message")
  moderationLogs    Boolean @default(false) @map("modlogs")
  moderationReports Boolean @default(false) @map("modreports")
  server            servers @relation(fields: [id], references: [id])
}

model moderationStrikes {
  id          String                @id @default(uuid()) @db.Uuid
  moderatorId String                @map("moderator_id")
  guildId     String                @map("server_id")
  targetId    String                @map("target_id")
  reason      String?
  createdAt   DateTime              @map("created_at") @db.Timestamptz(6)
  expiresAt   DateTime?             @map("expires_at") @db.Timestamptz(6)
  type        ModerationStrikeTypes
  details     String?
}

model User {
  id           String         @id
  accentColor  Int?           @map("accent_color")
  crbtBadges   String[]       @map("crbt_badges")
  telemetry    Boolean        @default(true)
  silentJoins  Boolean        @default(false) @map("silent_joins")
  silentLeaves Boolean        @default(false) @map("silent_leaves")
  reminders    Reminder[]
  memberData   ServerMember[]
}

model ServerMember {
  id           String              @id
  user_id      String
  user         User                @relation(references: [id], fields: [user_id])
  guild_id     String
  guild        servers             @relation(references: [id], fields: [guild_id])
  achievements MemberAchievement[]
  last_work    DateTime?           @db.Timestamptz(6)
  last_daily   DateTime?           @db.Timestamptz(6)
  work_exp     Int                 @default(0) @db.Integer
  money        Int                 @default(0) @db.Integer
  active_items EconomyItem[]       @relation("active_items")
  items        EconomyItem[]       @relation("items")
  daily_streak Int
}

model MemberAchievement {
  achievement_id String        @id
  achievement    Achievement   @relation(fields: [achievement_id], references: [achievement_id])
  member_id      String        @unique
  member         ServerMember? @relation(fields: [member_id], references: [id])
  progression    Json[]
  achieved_at    DateTime?     @db.Timestamptz(6)
}

model Achievement {
  achievement_id String              @id
  guild_id       String
  guild          servers?            @relation(fields: [guild_id], references: [id])
  name           String
  description    String?
  requirements   Json[]
  total_steps    Int
  members        MemberAchievement[]
}

model Economy {
  id                          String                @id
  currency_name_singular      String?
  currency_name_plural        String?
  currency_symbol             String?
  transaction_logs_channel_id String?
  server                      servers?              @relation(fields: [id], references: [id])
  work_cooldown               Int
  work_strings                String[]
  work_reward                 String
  daily_reward                String
  weekly_rewards              String[]
  items                       EconomyItem[]
  categories                  EconomyItemCategory[]
}

model EconomyItem {
  id              String              @id
  guild_id        String
  name            String
  icon            String?
  description     String?
  price           Int
  category_id     String
  category        EconomyItemCategory @relation(fields: [category_id], references: [id])
  type            Int
  stock           Int?
  // for items limited in time
  available_until DateTime?           @db.Timestamptz(6)
  // the value an item can hold (role ID, Multiplier, etc)
  value           String?
  // who's currently using the item
  activeMembers   ServerMember[]      @relation("active_items")
  // who has the item
  owners          ServerMember[]      @relation("items")
  // which economy does the item belong to
  economy         Economy             @relation(fields: [guild_id], references: [id])
}

model EconomyItemCategory {
  id       String        @id
  guild_id String
  items    EconomyItem[]
  label    String
  emoji    String?
  economy  Economy       @relation(fields: [guild_id], references: [id])
}

model Token {
  token String     @id
  data  Json       @db.Json
  type  TokenTypes
}

enum ModerationStrikeTypes {
  BAN
  TEMPBAN
  CLEAR
  KICK
  TIMEOUT
  WARN
  REPORT
}

enum TokenTypes {
  API
}

enum ReminderTypes {
  // basic user-set reminder (e.g. /reminder new)
  NORMAL
  // found on commands with a cooldown (e.g. economy commands)
  COMMAND
  // reminder with an attached message
  MESSAGE
  // reminder set for someone's birthday (deprecated feature)
  BIRTHDAY
}
